From b54c81a845d75d25dadba59291f39a6ec3759c0d Mon Sep 17 00:00:00 2001
From: Hai Li <hali@codeaurora.org>
Date: Fri, 5 Jun 2015 18:50:05 -0400
Subject: [PATCH 12/41] drm/msm: Use old regulator_set_optimum_mode API

Need to use regulator_set_optimum_mode API in msm-3.18 kernel tree.

Change-Id: Ib63a0cf480533d3b0302cbe90d91268d1c1f0b8b
Signed-off-by: Hai Li <hali@codeaurora.org>
Signed-off-by: Stephane Viau <sviau@codeaurora.org>
---
 drivers/gpu/drm/msm/dsi/dsi_host.c | 6 +++---
 drivers/gpu/drm/msm/dsi/dsi_phy.c  | 6 +++---
 drivers/gpu/drm/msm/edp/edp_ctrl.c | 6 +++---
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/msm/dsi/dsi_host.c b/drivers/gpu/drm/msm/dsi/dsi_host.c
index 8043993..297f843 100644
--- a/drivers/gpu/drm/msm/dsi/dsi_host.c
+++ b/drivers/gpu/drm/msm/dsi/dsi_host.c
@@ -331,7 +331,7 @@ static void dsi_host_regulator_disable(struct msm_dsi_host *msm_host)
 	DBG("");
 	for (i = num - 1; i >= 0; i--)
 		if (regs[i].disable_load >= 0)
-			regulator_set_load(s[i].consumer,
+			regulator_set_optimum_mode(s[i].consumer,
 					   regs[i].disable_load);
 
 	regulator_bulk_disable(num, s);
@@ -347,7 +347,7 @@ static int dsi_host_regulator_enable(struct msm_dsi_host *msm_host)
 	DBG("");
 	for (i = 0; i < num; i++) {
 		if (regs[i].enable_load >= 0) {
-			ret = regulator_set_load(s[i].consumer,
+			ret = regulator_set_optimum_mode(s[i].consumer,
 						 regs[i].enable_load);
 			if (ret < 0) {
 				pr_err("regulator %d set op mode failed, %d\n",
@@ -367,7 +367,7 @@ static int dsi_host_regulator_enable(struct msm_dsi_host *msm_host)
 
 fail:
 	for (i--; i >= 0; i--)
-		regulator_set_load(s[i].consumer, regs[i].disable_load);
+		regulator_set_optimum_mode(s[i].consumer, regs[i].disable_load);
 	return ret;
 }
 
diff --git a/drivers/gpu/drm/msm/dsi/dsi_phy.c b/drivers/gpu/drm/msm/dsi/dsi_phy.c
index bd37e61..7343f78 100644
--- a/drivers/gpu/drm/msm/dsi/dsi_phy.c
+++ b/drivers/gpu/drm/msm/dsi/dsi_phy.c
@@ -115,7 +115,7 @@ static void dsi_phy_regulator_disable(struct msm_dsi_phy *phy)
 	DBG("");
 	for (i = num - 1; i >= 0; i--)
 		if (regs[i].disable_load >= 0)
-			regulator_set_load(s[i].consumer,
+			regulator_set_optimum_mode(s[i].consumer,
 						regs[i].disable_load);
 
 	regulator_bulk_disable(num, s);
@@ -132,7 +132,7 @@ static int dsi_phy_regulator_enable(struct msm_dsi_phy *phy)
 	DBG("");
 	for (i = 0; i < num; i++) {
 		if (regs[i].enable_load >= 0) {
-			ret = regulator_set_load(s[i].consumer,
+			ret = regulator_set_optimum_mode(s[i].consumer,
 							regs[i].enable_load);
 			if (ret < 0) {
 				dev_err(dev,
@@ -153,7 +153,7 @@ static int dsi_phy_regulator_enable(struct msm_dsi_phy *phy)
 
 fail:
 	for (i--; i >= 0; i--)
-		regulator_set_load(s[i].consumer, regs[i].disable_load);
+		regulator_set_optimum_mode(s[i].consumer, regs[i].disable_load);
 	return ret;
 }
 
diff --git a/drivers/gpu/drm/msm/edp/edp_ctrl.c b/drivers/gpu/drm/msm/edp/edp_ctrl.c
index 81200e9..27ec223 100644
--- a/drivers/gpu/drm/msm/edp/edp_ctrl.c
+++ b/drivers/gpu/drm/msm/edp/edp_ctrl.c
@@ -332,7 +332,7 @@ static int edp_regulator_enable(struct edp_ctrl *ctrl)
 		goto vdda_set_fail;
 	}
 
-	ret = regulator_set_load(ctrl->vdda_vreg, VDDA_UA_ON_LOAD);
+	ret = regulator_set_optimum_mode(ctrl->vdda_vreg, VDDA_UA_ON_LOAD);
 	if (ret < 0) {
 		pr_err("%s: vdda_vreg set regulator mode failed.\n", __func__);
 		goto vdda_set_fail;
@@ -356,7 +356,7 @@ static int edp_regulator_enable(struct edp_ctrl *ctrl)
 lvl_enable_fail:
 	regulator_disable(ctrl->vdda_vreg);
 vdda_enable_fail:
-	regulator_set_load(ctrl->vdda_vreg, VDDA_UA_OFF_LOAD);
+	regulator_set_optimum_mode(ctrl->vdda_vreg, VDDA_UA_OFF_LOAD);
 vdda_set_fail:
 	return ret;
 }
@@ -365,7 +365,7 @@ static void edp_regulator_disable(struct edp_ctrl *ctrl)
 {
 	regulator_disable(ctrl->lvl_vreg);
 	regulator_disable(ctrl->vdda_vreg);
-	regulator_set_load(ctrl->vdda_vreg, VDDA_UA_OFF_LOAD);
+	regulator_set_optimum_mode(ctrl->vdda_vreg, VDDA_UA_OFF_LOAD);
 }
 
 static int edp_gpio_config(struct edp_ctrl *ctrl)
-- 
2.8.2

